Just completed the lab today (after attempting for several times), I got fail in first task which said 
“ Please create instances.tf file and import both instances and update them using Terraform.”

Here is my best practices accomplished this lab:

Task 1. Create the configuration file

In Cloud Shell, create your Terraform configuration files and a directory structure that resembles the following:

main.tf
variables.tf
modules/
└── instances
├── instances.tf
├── outputs.tf
└── variables.tf
└── storage
├── storage.tf
├── outputs.tf
└── variables.tf

Here are the codes to write in cloud shell

```
touch main.tf
touch variables.tf
mkdir modules
cd modules
mkdir instances
cd instances
touch instances.tf
touch outputs.tf
touch variables.tf
cd ..
mkdir storage
cd storage
touch storage.tf
touch outputs.tf
touch variables.tf
cd
```

Then open editor, fill out the variables.tf files in the root directory and within the modules. 
Add three variables to each file: region, zone, and project_id. 
For their default values of my lab, I use us-east1, us-east1-c, and Google Cloud Project ID based on left pane of lab.

```
variable "region" {
    default = "us-east1"
}

variable "zone" {
    default = "us-east1-c"
}

variable "project_id" {
    default = "qwiklabs-gcp-00-a4b2e4577b77"
}
```

Add the Terraform block and the Google Provider to the main.tf file.

```
terraform {
  required_providers {
    google = {
      source = "hashicorp/google"
      version = "3.55.0"
    }
  }
}

provider "google" {
  project     = var.project_id
  region      = var.region

  zone        = var.zone
}

module "instances" {

  source     = "./modules/instances"

}
```

Initialize terraform in cloud shell.

```
terraform init
```

Task 2. Import infrastructure

Navigate to Compute Engine > VM Instances.

Click on tf-instance-1. Copy the Instance ID down somewhere to use later.

Click on tf-instance-2. Copy the Instance ID down somewhere to use later.

Next, navigate to modules/instances/instances.tf. Copy the following configuration into the file:

You will see Instance ID, boot disk image, and machine type by clicking your instances.

```
resource "google_compute_instance" "tf-instance-1" {
  name         = "tf-instance-1"
  machine_type = "e2-medium"
  zone         = "us-east1-c"
  allow_stopping_for_update = true

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
   network = "default"
  }
}

resource "google_compute_instance" "tf-instance-2" {
  name         = "tf-instance-2"
  machine_type = "e2-medium"
  zone         = "us-east1-c"
  allow_stopping_for_update = true

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
    network = "default"
  }
}
```

You don’t need to add configuration below in instance.tf

```
metadata_startup_script = <<-EOT
        #!/bin/bash
    EOT
allow_stopping_for_update = true
```

Use following command to import

```
terraform import module.instances.google_compute_instance.tf-instance-1 <Instance ID tf-instance-1>
terraform import module.instances.google_compute_instance.tf-instance-2 <Instance ID tf-instance-2>
terraform plan
terraform apply
```

Task 3. Configure a remote backend

Open editor then go to modules > storage > storage.tf

Add the following command:

```
resource "google_storage_bucket" "storage-bucket" {
  name          = "tf-bucket-536427" <based on bucket_name in the left pane lab>
  location      = "US"
  force_destroy = true
  uniform_bucket_level_access = true
}
```

Add following to main.tf

```
module "storage" {
  source     = "./modules/storage"
}
```

Run cloud shell

```
terraform init
terraform apply
```

Configure storage bucket as the remote backend inside the main.tf file by replaced terraform block as below.

```
terraform {
  backend "gcs" {
    bucket  = "tf-bucket-536427" <based on bucket_name in the left pane lab>
 prefix  = "terraform/state"
  }
  required_providers {
    google = {
      source = "hashicorp/google"
      version = "3.55.0"
    }
  }
}
```

```
terraform init
```

Task 4. Modify and update infrastructure

Navigate to the instances module and modify the tf-instance-1 resource to use an e2-standard-2 machine type.
Modify the tf-instance-2 resource to use an e2-standard-2 machine type.
Add a third instance resource and name it tf-instance-541065<based on instance name of left pane lab>. 
For this third resource, use an e2-standard-2 machine type. 
Make sure to change the machine type to e2-standard-2 to all the three instances.

```
resource "google_compute_instance" "tf-instance-1" {
  name         = "tf-instance-1"
  machine_type = "e2-standard-2"
  zone         = "us-east1-c"
  allow_stopping_for_update = true

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
   network = "default"
  }
}

resource "google_compute_instance" "tf-instance-2" {
  name         = "tf-instance-2"
  machine_type = "e2-standard-2"
  zone         = "us-east1-c"
  allow_stopping_for_update = true

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
    network = "default"
  }
}

resource "google_compute_instance" "tf-instance-541065" {
  name         = "tf-instance-541065"
  machine_type = "e2-standard-2"
  zone         = "us-east1-c"
  allow_stopping_for_update = true

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
    network = "default"
  }
}
```

Run cloud shell

```
terraform init
terraform apply
```

Task 5. Destroy resources

```
terraform taint module.instances.google_compute_instance.tf-instance-541065
terraform plan
terraform apply
```

Navigate to the instances.tf and remove third instance, so that it will be

```
resource "google_compute_instance" "tf-instance-1" {
  name         = "tf-instance-1"
  machine_type = "e2-standard-2"
  zone         = "us-east1-c"
  allow_stopping_for_update = true

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
   network = "default"
  }
}

resource "google_compute_instance" "tf-instance-2" {
  name         = "tf-instance-2"
  machine_type = "e2-standard-2"
  zone         = "us-east1-c"
  allow_stopping_for_update = true

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
    network = "default"
  }
}
```

```
terraform apply
```

Task 6. Use a module from Registry

Add this module to main.tf file.

```
module "vpc" {
    source  = "terraform-google-modules/network/google"
    version = "3.4.0"

    project_id   = var.project_id
    network_name = "tf-vpc-499873" <based on VPC name in left pane lab>
    routing_mode = "GLOBAL"

    subnets = [
        {
            subnet_name           = "subnet-01"
            subnet_ip             = "10.10.10.0/24"
            subnet_region         = "us-east1"
        },
        {
            subnet_name           = "subnet-02"
            subnet_ip             = "10.10.20.0/24"
            subnet_region         = "us-east1"
        }]
}
```

Run cloud shell

```
terraform init
terraform apply
```

Next, navigate to instances.tffile and update the configuration resources to connect tf-instance-1 to subnet-01 and tf-instance-2 to subnet-02. So that, it will be

```
resource "google_compute_instance" "tf-instance-1" {
  name         = "tf-instance-1"
  machine_type = "e2-standard-2"
  zone         = "us-east1-c"
  allow_stopping_for_update = true

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
    network = "tf-vpc-499873"
    subnetwork = "subnet-01"

  }
}

resource "google_compute_instance" "tf-instance-2" {
  name         = "tf-instance-2"
  machine_type = "e2-standard-2"
  zone         = "us-east1-c"
  allow_stopping_for_update = true

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
    network = "tf-vpc-499873"
    subnetwork = "subnet-02"
  }
}
```

Run cloud shell

```
terraform init
terraform apply
```

Task 7. Configure a firewall

Create a firewall rule resource in the main.tf file, and name it tf-firewall.

Add to main.tf file.

```
resource "google_compute_firewall" "tf-firewall" {
  name    = "tf-firewall"
  network = "tf-vpc-499873"

  allow {
    protocol = "tcp"
    ports    = ["80"]
  }

  source_tags = ["web"]
  source_ranges = ["0.0.0.0/0"]
}
```

Run cloud shell

```
terraform init
terraform apply
```

Yeah we just finished our lab. Congratulations!
